#!/usr/bin/plcsh
# Run as ./find-gee-slice.plcsh -- <args>

import sys
import os
import re
import tarfile
import argparse
import json
import time
from StringIO import StringIO
from django.core.validators import validate_email



keydir='/usr/share/keydir'
tardir='/tmp/GEE'
fabfile='/usr/share/gee/fabfile.py'
readme='/usr/share/gee/README'
network='/usr/share/gee/network.py'

parser = argparse.ArgumentParser(description='Get the tarball for a new GEE slice')
parser.add_argument('-e','--email',
                    help='Email address of the user for this slice', 
		    required=True)

args = parser.parse_args()

# Check that the email address looks valid
try:
    validate_email(args.email)
except:
    sys.exit("ERROR: %s is not a valid email address!" % args.email)

# Disallow the fake email addresses that mark the account as unused
if re.match("instageni.*@gmail.com", args.email):
    sys.exit("ERROR: email address %s is not allowed!" % args.email)

alloc = GetPersons({'email':args.email, 'last_name':'IGPL'})

#
# If we can't find anything, the user has no slicelets.  Just
# return that and exit
#
if not alloc:
    print json.dumps({'user':args.email, 'has_slicelet':False})
    exit(0)

acct = alloc[0]
slice = GetSlices(acct['slice_ids'])[0]

#
# if the tarball exists, just return it.  Otherwise
# create it and return it...
#
keyfile = keydir + '/%s.pem' % slice['name']
tarball = tardir + '/%s.tar' % slice['name']

if os.path.exists(tarball):
    print json.dumps({'user': args.email, 'has_slicelet': True, 'slicelet_file': tarball, 'slice':slice['name'], 'expires': slice['expires']})
    exit(0)
    

if not os.path.exists(tardir):
    os.makedirs(tardir)

try:
    os.remove(tarball)
except OSError:
    pass

tar = tarfile.open(tarball, 'w')
for name in [keyfile, readme, network]:
    arcname = os.path.split(name)[1]
    tar.add(name, arcname=arcname)

# Fix up fabfile.py template
with open(fabfile, "r") as f:
     tmpl = f.read()
fab = re.sub("%SLICE%", slice['name'], tmpl)

ti = tarfile.TarInfo("fabfile.py")
ti.size = len(fab)
ti.mtime = time.time()
tar.addfile(ti, StringIO(fab))

tar.close()

# Return the email and the tarball, in JSON format
print json.dumps({'user': args.email, 'has_slicelet': True,  'expires': slice['expires'], 'slicelet_file': tarball, 'slice':slice['name']})

